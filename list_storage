#!/usr/bin/env python3

import sys
import os
import re
import json
import subprocess
from math import floor
from typing import NamedTuple
from typing import Union

from rich import print
from rich.console import Console
from rich.table import Table
from rich.style import Style
from rich import box


class DEV_INFO(NamedTuple):
    dev: str = ''
    dev_id: list = []
    dev_maj_min: str = ''
    dev_path: str = ''
    dev_phys_path: str = ''
    sg: str = ''
    ata: str = ''
    scsi: str = ''
    wwn: str = ''
    nvme: str = ''
    enc: str = ''
    slot: str = ''
    dev: str = ''
    sg: str = ''
    model_name: str = ''
    serial: str = ''
    size: str = ''


class SLOT_INFO(NamedTuple):
    enc: str = ''
    slot: str = ''
    dev: str = ''


def list_fullpath(dir_path):
    try:
        return [ os.path.join(dir_path, f) for f in os.listdir(dir_path) ]
    except:
        return []


def match_item_in_list(list_search, item):
    for i in list_search:
        if item in i:
            return True
    return False


def list_remove_item(target_list: list, item_list):
    target_list[:] = [el for el in target_list if el != item_list]


def get_arg(target: list, item) -> bool:
    """Remove inplace all instances of item from list and return True if found"""
    len_begin = len(target)
    list_remove_item(target, item)
    len_end = len(target)
    return len_begin != len_end


def get_arg_value(target: list, item):
    """Remove inplace all instances of item and item+1 from list and return item+1"""
    val = None
    for x in target:
        if x == item:
            val = target.pop(target.index(x) + 1)
            target.pop(target.index(x))
    return val


def get_arg_2values(target: list, item):
    """Remove inplace all instances of item, item+1 and item+2 from list and return item+1, item+2"""
    val1 = val2 = None
    for x in target:
        if x == item:
            val2 = target.pop(target.index(x) + 2)
            val1 = target.pop(target.index(x) + 1)
            target.pop(target.index(x))
    return val1, val2


def is_help(args: Union[str, list]) -> bool:
    if not args: return False
    if isinstance(args, str): args = args.split()
    help_opts = ('-h', '--h', '-help', '--help', 'help')
    return any(opt in args for opt in help_opts)


def read_sys_file(input_file: str) -> str:
    if not input_file or not os.path.isfile(input_file): return ''
    content = ''
    with open(input_file, encoding="ascii", errors="replace") as filecontent:
        content = filecontent.read().strip()
    return content


def write_sys_file(output_file: str, content: str):
    if not output_file or not os.path.isfile(output_file) or not content: return
    with open(output_file, 'w', encoding="ascii", errors="replace") as f:
        f.write(content)


def get_sas_led_status(enclosure, slot):
    ENCLOSURE_DIR = f'/sys/class/enclosure/{enclosure}'
    slot_list = list_fullpath(ENCLOSURE_DIR)
    if not slot_list: return ('','','')
    slot_list.sort()
    inferred_slot = None
    for s in slot_list:
        if slot in s.split('/')[-1]:
            SLOT_DIR = s
            break

    LED_LOCATE = f'{SLOT_DIR}/locate'
    LED_FAULT = f'{SLOT_DIR}/fault'
    STATUS_LOCATE = read_sys_file(LED_LOCATE)
    STATUS_FAULT = read_sys_file(LED_FAULT)
    if not STATUS_LOCATE or not STATUS_FAULT: return ('','','')
    return (STATUS_LOCATE, STATUS_FAULT, f'LED LOCATE/FAULT: {STATUS_LOCATE}/{STATUS_FAULT}')


def toggle_sas_led_locate(enclosure, slot):
    ENCLOSURE_DIR = f'/sys/class/enclosure/{enclosure}'
    slot_list = list_fullpath(ENCLOSURE_DIR)
    if not slot_list: return ('','','')
    slot_list.sort()
    inferred_slot = None
    for s in slot_list:
        if slot in s.split('/')[-1]:
            SLOT_DIR = s
            break

    LED_LOCATE = f'{SLOT_DIR}/locate'
    STATUS_LOCATE = read_sys_file(LED_LOCATE)
    if not STATUS_LOCATE: return
    LED_VALUE = '1' if STATUS_LOCATE == '0' else '0'
    write_sys_file(LED_LOCATE, LED_VALUE)


def toggle_sas_led_fault(enclosure, slot):
    ENCLOSURE_DIR = f'/sys/class/enclosure/{enclosure}'
    slot_list = list_fullpath(ENCLOSURE_DIR)
    if not slot_list: return ('','','')
    slot_list.sort()
    inferred_slot = None
    for s in slot_list:
        if slot in s.split('/')[-1]:
            SLOT_DIR = s
            break

    LED_FAULT = f'{SLOT_DIR}/fault'
    STATUS_FAULT = read_sys_file(LED_FAULT)
    if not STATUS_FAULT: return
    LED_VALUE = '1' if STATUS_FAULT == '0' else '0'
    write_sys_file(LED_FAULT, LED_VALUE)

GB = 1000 * 1000 * 1000
TB = GB * 1000
GiB = 1024 * 1024 * 1024
TiB = GiB * 1024


sys.argv.pop(0)
if is_help(sys.argv):
    print('''list_storage [ enc Enclosure slot Slot | dev name | sg name | wwn wwn | ] [ locate | fault | status ] [ noheader ]

Slot path is relative to /sys/class/enclosure/<enc>
Dev/sg names are relative to /dev/ (to use as arguments) or relative to /sys/block/ respective to /sys/class/scsi_generic/ to get device properties
Device IDs are relative to /dev/disk/by-id/
locate   : toggle the location led
fault    : toggle the fault led
status   : print the status of locate/fault led
noheader  : disable printing of all titles of tables/columns
''')
    sys.exit()

select_enc = get_arg_value(sys.argv, 'enc')
if select_enc is None: select_enc = ''

select_slot = get_arg_value(sys.argv, 'slot')
if select_slot is None: select_slot = ''

select_dev = get_arg_value(sys.argv, 'dev')
if select_dev is None: select_dev = ''

select_sg = get_arg_value(sys.argv, 'sg')
if select_sg is None: select_sg = ''

select_wwn = get_arg_value(sys.argv, 'wwn')
if select_wwn is None: select_wwn = ''

DO_SELECT = bool(select_enc) or bool(select_slot) or bool(select_dev) or bool(select_sg) or bool(select_wwn)

enable_locate = bool(get_arg(sys.argv, 'locate'))
enable_fault = bool(get_arg(sys.argv, 'fault'))
enable_status = bool(get_arg(sys.argv, 'status'))

disable_header = bool(get_arg(sys.argv, 'noheader'))
enable_header = not disable_header

if bool(select_enc) != bool(select_slot):
    print('Use both enc and slot args to select a given unique slot')
    select_enc = select_slot = ''

if not enable_status: enable_status = enable_locate or enable_fault

## Make a dict mapping from dev name to all by-id dev names
dev_byid_list = list_fullpath('/dev/disk/by-id')
match_part = re.compile(r".*-part\w")

dev_byid_map = {}
for d in dev_byid_list:
    d_byid = d.replace('/dev/disk/by-id/','')
    d_name = os.path.realpath(d).replace('/dev/','')
    if d_byid.startswith('md-') or match_part.match(d_byid): continue
    if d_name in dev_byid_map:
        dev_byid_map[d_name].append(d_byid)
    else:
        dev_byid_map[d_name] = [d_byid]

##   SAS enclosures listing
list_enclosures = list_fullpath('/sys/class/enclosure')
list_enclosures.sort()

# get a list of Slots in enclosures
list_slots = []
for enc in list_enclosures:
    l = [ i for i in list_fullpath(enc) if os.path.isdir(i) and 'Slot' in i ]
    l.sort()
    list_slots.extend(l)

## Make a list with all the slots and their contend (either dev or EMPTY status)
scsi_slot_dev_mapping = []
for slot in list_slots:
    mapped_dev = list_fullpath(f'{slot}/device/block/')
    enc_slot = slot.replace(f'/sys/class/enclosure/', '')
    enc, _, slot_nr = enc_slot.partition('/')
    dev_name = os.path.basename(mapped_dev[0]) if mapped_dev else 'EMPTY'
    scsi_slot_dev_mapping.append(SLOT_INFO(enc = enc, slot = slot_nr, dev = dev_name))

def get_slotinfo(dev_name):
    for slot_info in scsi_slot_dev_mapping:
        if slot_info.dev == dev_name: return slot_info
    return None

def get_dev_slot(enc, slot):
    for slot_info in scsi_slot_dev_mapping:
        if slot_info.enc == enc and slot in slot_info.slot: return slot_info.dev
    return None

# clean up devides list
def is_physical_dev(name):
    real_path = None
    try:
        real_path = os.path.realpath(name) # , strict = True
    except Exception:
        return False
    return 'virtual' not in real_path

# make devices list
list_devs = list_fullpath('/sys/block')
list_devs_phys = list(filter(is_physical_dev, list_devs))

dev_path_mapping = [ (os.path.realpath(d), d) for d in list_devs_phys ]

connected_sata = []
connected_sas = []
connected_nvme = []

dev_list_nvme = []
dev_list_sata = []
dev_list_sas  = []

for d in dev_path_mapping:
    if '/nvme/' in d[0]:
        connected_nvme.append(d)
        dev_list_nvme.append(os.path.basename(d[1]))
        continue
    if '/ata' in d[0]:
        connected_sata.append(d)
        dev_list_sata.append(os.path.basename(d[1]))
        continue
    if '/expander' in d[0]:
        connected_sas.append(d)
        dev_list_sas.append(os.path.basename(d[1]))
        continue

def sort_nvme(dev):
    return dev[1]
connected_nvme.sort(key=sort_nvme)

def sort_sata(dev):
    dev_list = dev[0].split('/')
    ata_element = next( (i for i in dev_list if i.startswith('ata')), None )
    #ata_nr = int(dev_list[6].replace('ata',''))
    ata_nr = int(ata_element.replace('ata',''))
    return ata_nr
connected_sata.sort(key=sort_sata)

def sort_sas(dev):
    dev_list = dev[0].split('/')
    port_id = dev_list[9].replace('port-','')
    port_id_list = port_id.split(':')
    return 10000 * int(port_id_list[0]) + 100 * int(port_id_list[1]) + int(port_id_list[2])
connected_sas.sort(key=sort_sas)

def is_dev_in_nvme_list(dev):
    return dev in dev_list_nvme

def is_dev_in_sata_list(dev):
    return dev in dev_list_sata

def is_dev_in_sas_list(dev):
    return dev in dev_list_sas


devices_info_list = []
for dev_phys_path, dev_sys_path in dev_path_mapping:
    ata = scsi = wwn = nvme = ''
    dev_name = os.path.basename(dev_sys_path)
    by_id_name_list = dev_byid_map[dev_name]

    slot_info = get_slotinfo(dev_name)
    enc = slot_info.enc if slot_info else ''
    slot = slot_info.slot if slot_info else ''

    dev_phys_path_list = dev_phys_path.split('/')

    for p in by_id_name_list:
        if p.startswith('ATA_') or p.startswith('nvme-eui.'): continue
        if p.startswith('wwn-'):  wwn = p
        if p.startswith('scsi-'): scsi = p
        if p.startswith('ata-'):  ata = p
        if p.startswith('nvme-'): nvme = p

    scsi_generic = list_fullpath(f'{dev_sys_path}/device/scsi_generic/')
    sg_name = f'/sys/class/scsi_generic/{scsi_generic[0].split("/")[-1]}' if scsi_generic else ''

    dev_maj_min = read_sys_file(f'{dev_sys_path}/device/{dev_name}/dev') if nvme else read_sys_file(f'{dev_sys_path}/device/block/{dev_name}/dev')
    pcie_parent_id = dev_phys_path_list[4].replace('0000:','')
    ctrl_dev_id = dev_phys_path_list[5].replace('0000:','')

    if nvme:
        enc = pcie_parent_id
        slot = ctrl_dev_id

    ata_element = next( (i for i in dev_phys_path_list if i.startswith('ata')), None )
    if ata_element:
        index_of_ata_element = dev_phys_path_list.index(ata_element)
        pcie_path_long = dev_phys_path_list[4:index_of_ata_element]
        pcie_path = [ i.replace('0000:', '') for i in pcie_path_long ]
        pcie_parent_id = '/'.join(pcie_path[:-1])
        ctrl_dev_id = pcie_path[-1].replace('0000:', '')
        ata_dev_path = '/'.join(dev_phys_path_list[:(index_of_ata_element + 1)])
        port_no = int(read_sys_file(f'{ata_dev_path}/ata_port/{ata_element}/port_no'))
        enc = pcie_parent_id
        slot = f'{ctrl_dev_id}/{port_no}'

    smartctl_info_proc = subprocess.run(['smartctl', '--json=c', '-i', f'/dev/{dev_name}'], stdout = subprocess.PIPE, stderr = subprocess.PIPE, encoding = 'utf-8', shell = False)
    smartctl_out = smartctl_info_proc.stdout
    smartctl_json = json.loads(smartctl_out)
    size_bytes = int(smartctl_json['user_capacity']['bytes'])
    size_GB = str(floor(size_bytes/GB))
    model_name_nice = " ".join(smartctl_json['model_name'].strip().split())

    devices_info_list.append(DEV_INFO(dev = dev_name, dev_id = by_id_name_list, dev_path = dev_sys_path, dev_phys_path = dev_phys_path,
                                      ata = ata, scsi = scsi, wwn = wwn, nvme = nvme, sg = sg_name, dev_maj_min = dev_maj_min,
                                      enc = enc, slot = slot, model_name = f'"{model_name_nice}"', serial = smartctl_json['serial_number'], size = size_GB))

# get device info for a dev name
def get_info4dev(dev_name):
    for d in devices_info_list:
        if d.dev.lower() == os.path.basename(dev_name).lower(): return d
    return None


def get_info4sg(sg_name):
    for d in devices_info_list:
        if os.path.basename(d.sg).lower() == os.path.basename(sg_name).lower(): return d
    return None


def get_info4majmin(maj_min):
    for d in devices_info_list:
        if d.dev_maj_min == maj_min: return d
    return None


def get_info4wwn(wwn):
    for d in devices_info_list:
        if wwn.lower() in d.wwn.lower(): return d
    return None


def get_info4encslot(enc,slot):
    for d in devices_info_list:
        if enc.lower() in d.enc.lower() and slot.lower() in d.slot.lower(): return d
    return None


def get_dev_info_msg(dev_name_short, do_status: bool = False):
    if dev_name_short == 'EMPTY' or not dev_name_short: return ()
    dev_info = get_info4dev(dev_name_short)
    if '/nvme/' in dev_info.dev_phys_path:
        return (dev_info.enc, dev_info.slot, dev_info.dev, dev_info.dev_maj_min, dev_info.size, dev_info.model_name, dev_info.serial)
    if '/ata' in dev_info.dev_phys_path:
        return (dev_info.enc, dev_info.slot, dev_info.dev, dev_info.dev_maj_min, os.path.basename(dev_info.sg), dev_info.wwn, dev_info.size, dev_info.model_name, dev_info.serial)
    if '/expander' in dev_info.dev_phys_path:
        led_msg = ''
        if do_status:
            led_status_info = get_sas_led_status(dev_info.enc, dev_info.slot)
            led_msg = f'{led_status_info[0]}/{led_status_info[1]}'
        return (dev_info.enc, dev_info.slot, dev_info.dev, dev_info.dev_maj_min, os.path.basename(dev_info.sg), dev_info.wwn, dev_info.size, dev_info.model_name, dev_info.serial, led_msg)


def get_sas_slot_info_msg(enc, slot, do_status):
    dev = get_dev_slot(enc, slot)
    if dev:
        led_msg = ''
        if do_status:
            led_status_info = get_sas_led_status(enc, slot)
            led_msg = f'{led_status_info[0]}/{led_status_info[1]}'
        return (enc, slot, 'EMPTY', '', '', '', '', '', led_msg) if dev == 'EMPTY' else get_dev_info_msg(os.path.basename(dev), do_status)
    return ()

my_title_style = Style(bold = True)


table_nvme = Table(title = "NVME connected devices" if enable_header else None,
                   pad_edge = False, show_edge = False, show_lines = False, box = None, title_style = my_title_style, show_header = enable_header)
table_nvme.add_column('RootID')
table_nvme.add_column('DevID')
table_nvme.add_column('Dev name')
table_nvme.add_column('Maj:Min')
table_nvme.add_column('Size GB', justify="right")
table_nvme.add_column('Model Name')
table_nvme.add_column('Serial')

table_sata = Table(title = "SATA connected devices" if enable_header else None,
                   pad_edge = False, show_edge = False, show_lines = False, box = None, title_style = my_title_style, show_header = enable_header)
table_sata.add_column('RootID')
table_sata.add_column('CtrlID/slot')
table_sata.add_column('Dev name')
table_sata.add_column('Maj:Min')
table_sata.add_column('SG')
table_sata.add_column('WWN')
table_sata.add_column('Size GB', justify="right")
table_sata.add_column('Model Name')
table_sata.add_column('Serial')

table_sas = Table(title = "SAS connected devices" if enable_header else None,
                  pad_edge = False, show_edge = False, show_lines = False, box = None, title_style = my_title_style, show_header = enable_header)
table_sas.add_column('EncID')
table_sas.add_column('Slot')
table_sas.add_column('Dev name')
table_sas.add_column('Maj:Min')
table_sas.add_column('SG')
table_sas.add_column('WWN')
table_sas.add_column('Size GB', justify="right")
table_sas.add_column('Model Name')
table_sas.add_column('Serial')
table_sas.add_column('Loc/Flt')


WHOLE_MSG = ''
SELECTED_DEV = ''

if DO_SELECT:
    if select_dev:
        SELECTED_DEV = get_info4dev(select_dev)
    if select_sg:
        SELECTED_DEV = get_info4sg(select_sg)
    if select_wwn:
        SELECTED_DEV = get_info4wwn(select_wwn)

if connected_nvme:
    if DO_SELECT:
        if SELECTED_DEV and is_dev_in_nvme_list(SELECTED_DEV.dev):
            table_nvme.add_row(*get_dev_info_msg(os.path.basename(SELECTED_DEV.dev)))
    else:
        for dev in connected_nvme:
            table_nvme.add_row(*get_dev_info_msg(os.path.basename(dev[1])))

if connected_sata:
    if DO_SELECT:
        if SELECTED_DEV and is_dev_in_sata_list(SELECTED_DEV.dev):
            table_sata.add_row(*get_dev_info_msg(os.path.basename(SELECTED_DEV.dev)))
    else:
        for dev in connected_sata:
            table_sata.add_row(*get_dev_info_msg(os.path.basename(dev[1])))

if connected_sas:
    if DO_SELECT:
        if select_enc and select_slot:
            if enable_locate:
                toggle_sas_led_locate(select_enc, select_slot)
            if enable_fault:
                toggle_sas_led_fault(select_enc, select_slot)
            table_sas.add_row(*get_sas_slot_info_msg(select_enc, select_slot, enable_status))
        elif SELECTED_DEV and is_dev_in_sas_list(SELECTED_DEV.dev):
            if enable_locate:
                toggle_sas_led_locate(SELECTED_DEV.enc, SELECTED_DEV.slot)
            if enable_fault:
                toggle_sas_led_fault(SELECTED_DEV.enc, SELECTED_DEV.slot)
            table_sas.add_row(*get_dev_info_msg(os.path.basename(SELECTED_DEV.dev), enable_status))
    else:
        for slot in scsi_slot_dev_mapping:
            table_sas.add_row(*get_sas_slot_info_msg(slot.enc, slot.slot, enable_status))


console = Console()

if table_nvme.rows:
    console.print(table_nvme)
    print()

if table_sata.rows:
    console.print(table_sata)
    print()

if table_sas.rows:
    console.print(table_sas)

