if [[ -n ${ALIBUILD_WORK_DIR}  ]]; then
    type -p alienv 2>&1 > /dev/null && eval "$(alienv shell-helper)"
    export ALIBUILD_ARCHITECTURE=$(aliBuild architecture)
fi

alibuild_load_aliphys () {
alienv load -q AliPhysics/${1} 2>/dev/null

alienv load -q AliPhysics/${ALIBUILD_VER} 2>/dev/null
RESULT=$?

if [[ "${2}" == "INCLUDES" && "${RESULT}" == "0" ]]; then
    [[ -n "${VC_ROOT}" ]]                 && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${VC_ROOT}/include"                || C_INCLUDE_PATH="${VC_ROOT}/include" ; }
    [[ -n "${GSL_ROOT}" ]]                && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${GSL_ROOT}/include"               || C_INCLUDE_PATH="${GSL_ROOT}/include" ; }
    [[ -n "${CGAL_ROOT}" ]]               && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${CGAL_ROOT}/include"              || C_INCLUDE_PATH="${CGAL_ROOT}/include" ; }
    [[ -n "${FASTJET_ROOT}" ]]            && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${FASTJET_ROOT}/include"           || C_INCLUDE_PATH="${FASTJET_ROOT}/include" ; }
    [[ -n "${KFPARTICLE_ROOT}" ]]         && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${KFPARTICLE_ROOT}/include"        || C_INCLUDE_PATH="${KFPARTICLE_ROOT}/include" ; }
    [[ -n "${ALIEN_RUNTIME_ROOT}" ]]      && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${ALIEN_RUNTIME_ROOT}/include"     || C_INCLUDE_PATH="${ALIEN_RUNTIME_ROOT}/include" ; }
    [[ -n "${ROOTSYS}" ]]                 && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${ROOTSYS}/include"                || C_INCLUDE_PATH="${ROOTSYS}/include" ; }
    [[ -n "${ALIEN_ROOT_LEGACY_ROOT}" ]]  && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${ALIEN_ROOT_LEGACY_ROOT}/include" || C_INCLUDE_PATH="${ALIEN_ROOT_LEGACY_ROOT}/include" ; }
    [[ -n "${ALICE_ROOT}" ]]              && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${ALICE_ROOT}/include"             || C_INCLUDE_PATH="${ALICE_ROOT}/include" ; }
    [[ -n "${ALICE_PHYSICS}" ]]           && { [[ -n "${C_INCLUDE_PATH}" ]] && C_INCLUDE_PATH="${C_INCLUDE_PATH}:${ALICE_PHYSICS}/include"          || C_INCLUDE_PATH="${ALICE_PHYSICS}/include" ; }
    CPLUS_INCLUDE_PATH="${C_INCLUDE_PATH}"
    [[ -n ${CPLUS_INCLUDE_PATH} ]] && export CPLUS_INCLUDE_PATH C_INCLUDE_PATH
fi
}

ali_latest () { alibuild_load_aliphys latest ${1}; }

alibuild_load () { alienv load -q ${1} 2>/dev/null; }

o2phys_cvmfs_load () {
local TAG CVMFS WORK_DIR ALIBUILD_ARCH_PREFIX
TAG=${1}
shift

WORK_DIR="/cvmfs/alice.cern.ch"
ALIBUILD_ARCH_PREFIX="el9-x86_64/Packages"

CVMFS="${WORK_DIR}/${ALIBUILD_ARCH_PREFIX}/O2Physics/${TAG}/etc/profile.d/init.sh"
[[ ! -f ${CVMFS} ]] && { return; }

source "${CVMFS}"
}


# Recompile an aliBuild development package with ninja.
# Usage: recompile <package> <branch> <target>
# Arguments <branch> and <target> are optional.
# Command "recompile O2Physics" will invoke "ninja install" for the "master" branch of O2Physics.
# Command "recompile O2Physics my-branch" will invoke "ninja install" for the "my-branch" branch of O2Physics.
# Command "recompile O2Physics my-branch Common" will invoke "ninja Common/install" for the "my-branch" branch of O2Physics.
recompile() {
  # set -o xtrace # to print out each command
  [ "$1" ] || { echo "Provide a package name"; return 1; }
  package="$1"
  branch="master"
  [ "$2" ] && branch="$2"
  target=""
  target_name="all"
  [ "$3" ] && { target="$3/"; target_name="$3"; }
  dir_pwd=$(pwd)
  dir_build="$ALIBUILD_WORK_DIR/BUILD/${package}-latest-${branch}/${package}"
  log="$(dirname "$dir_build")/log"
  log_err="$(dirname "$dir_build")/log_err"
  cd "$dir_build" || { echo "Could not enter $dir_build"; return 1; }
  direnv allow || { echo "Failed to allow direnv"; return 1; }
  eval "$(direnv export "$SHELL")"
  echo "Recompiling ${package}_${branch}_${target_name}..."
  start=$(date +%s)
  ninja "${target}install" > "$log" 2>&1
  ec=$?
  end=$(date +%s)
  echo "Compilation exited with: $ec"
  echo "See the log at: $log"
  if [ "$ec" != "0"  ]; then
    grep -e "FAILED:" -e "error:" "$log" > "$log_err"
    echo "See the errors at: $log_err"
  fi
  echo "Took $((end - start)) seconds."
  cd "$dir_pwd" || return 1
  # set +o xtrace
  return $ec
}

# Recompile O2 with ninja.
recompile-o2() { recompile "O2" "$1" "$2"; }

# Recompile O2Physics with ninja.
recompile-o2p() { recompile "O2Physics" "$1" "$2"; }

# Find the workflow that produces a given table.
# Limited functionality. Use find_dependencies.py for a full search.
find-o2-table-producer() {
  # Check that we are inside the O2 or the O2Physics directory.
  [[ "$PWD/" != *"/O2"*"/"* ]] && { echo "You must be inside the O2 or the O2Physics directory."; return 1; }
  [ ! "$1" ] && { echo "Provide a table name."; return 1; }
  # Find files that produce the table.
  table="$1"
  echo "Table $table is produced in:"
  files=$(grep -r -i --include="*.cxx" "<aod::$table>" | grep -E 'Produces|Spawns' | cut -d: -f1 | sort -u)
  for f in $files; do
    # Extract the workflow name from the CMakeLists.txt in the same directory.
    wf=$(grep -B 1 "$(basename "$f")" "$(dirname "$f")/CMakeLists.txt" | head -n 1 | cut -d\( -f2)
    echo "$wf in $f"
  done
}

# Find compilation error messages in a compilation log.
debug-o2-compile() {
  [ "$1" ] || { echo "Provide a log file"; return 1; }
  grep -n -e "FAILED:" -e "error:" -e "warning:" "$1"
}

# Find runtime error messages in an execution log.
debug-o2-run() {
  [ "$1" ] || { echo "Provide a log file"; return 1; }
  grep -n -e "\\[ERROR\\]" -e "\\[FATAL\\]" -e "segmentation" -e "Segmentation" -e "SEGMENTATION" -e "command not found" -e "Program crashed" -e "Error:" -e "Error in " -e "\\[WARN\\]" -e "Warning in " "$1"
}

## CVMFS ALICE functions

__cvmfs_enabled () { : ; }
__cvmfs_get_aliphys () { : ; }


cvmfs_enter_o2phys () { /cvmfs/alice.cern.ch/bin/alienv enter O2Physics::${1}; }
cvmfs_enter_o2 () { /cvmfs/alice.cern.ch/bin/alienv enter O2::${1}; }
cvmfs_enter () { /cvmfs/alice.cern.ch/bin/alienv enter ${1}; }

cvmfs_load () {
local list output_str list_arr
list="$( echo ${1} | sed 's/VO_ALICE@//g' )"
output_str=""

IFS=',' read -ra list_arr <<< "${list}"
for tag in "${list_arr[@]}"; do
    output_str="${output_str}${output_str:+,}VO_ALICE@${tag}"
done
eval $(/cvmfs/alice.cern.ch/bin/alienv printenv "${output_str}");
}

cvmfs_load_aliphys () { cvmfs_load_alice "AliPhysics::${1}"; }
cvmfs_load_o2 () { cvmfs_load_alice "O2::${1}"; }
cvmfs_load_o2phys () { cvmfs_load_alice "O2Physics::${1}"; }

