#!/bin/bash
#####################
###   FUNCTIONS   ###
#####################

functions_list ()      { declare -f; }
functions_list_name () { declare -F; }
functions_show_def ()  { declare -f $1; }

SourceIfValid () { [[ -f $1 ]] && source $1; }

ITEM_IN_PATH () {
local LIST_STR ITEM path_arr n
[[ -z "${1}" ]] && return 1;
[[ -z "${2}" ]] && return 1;
LIST_STR="${1}"
ITEM="${2}"
read -d : -a path_arr <<< "${LIST_STR}"
for (( n=0; n < ${#path_arr[*]}; n++)); do
    [[ "${path_arr[n]}" == "${ITEM}" ]] && return 0;
done
return 1;
}

__PATH_INS () { ITEM_IN_PATH "${PATH}" ${1} && return 0; [[ -z ${PATH} ]] && export PATH=${1} || export PATH="${1}:${PATH}"; }
__PATH_ADD () { ITEM_IN_PATH "${PATH}" ${1} && return 0; [[ -z ${PATH} ]] && export PATH=${1} || export PATH="${PATH}:${1}"; }

__LDLIB_INS () { ITEM_IN_PATH "${LD_LIBRARY_PATH}" ${1} && return 0; [[ -z ${LD_LIBRARY_PATH} ]] && export LD_LIBRARY_PATH=${1} || export LD_LIBRARY_PATH="${1}:${LD_LIBRARY_PATH}"; }
__LDLIB_ADD () { ITEM_IN_PATH "${LD_LIBRARY_PATH}" ${1} && return 0; [[ -z ${LD_LIBRARY_PATH} ]] && export LD_LIBRARY_PATH=${1} || export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${1}"; }

__PYPATH_INS () { ITEM_IN_PATH "${PYTHONPATH}" ${1} && return 0; [[ -z ${PYTHONPATH} ]] && export PYTHONPATH=${1} || export PYTHONPATH="${1}:${PYTHONPATH}"; }
__PYPATH_ADD () { ITEM_IN_PATH "${PYTHONPATH}" ${1} && return 0; [[ -z ${PYTHONPATH} ]] && export PYTHONPATH=${1} || export PYTHONPATH="${PYTHONPATH}:${1}"; }

__MANPATH_INS () { ITEM_IN_PATH "${MANPATH}" ${1} && return 0; [[ -z ${MANPATH} ]] && export MANPATH=${1} || export MANPATH="${1}:${MANPATH}"; }
__MANPATH_ADD () { ITEM_IN_PATH "${MANPATH}" ${1} && return 0; [[ -z ${MANPATH} ]] && export MANPATH=${1} || export MANPATH="${MANPATH}:${1}"; }

## CVMFS ALICE functions
source ${HOME}/bin/cvmfs_load_f

__cvmfs_enabled () { [[ "${ALICE_ENV}" == "1" ]] && echo "#CVMFS"; }
__cvmfs_get_aliphys () { /cvmfs/alice.cern.ch/bin/alienv -t list 2>&1 | awk -F"/" '/AliPhysics/ {print ":"$2"#"}'; }

## aliBuild functions
source ${HOME}/bin/alibuild_load_f

###########################################################
##   GIT
git_push2master_current () {
local branch_name=$(git symbolic-ref --short -q HEAD)
git push origin ${branch_name}:master
}

git_push2master_byname () {
[[ -z $1 ]] && echo "An argument is needed : the branch name" && return

local branch_list=$(git branch -l)
[[ !( "$branch_list" =~ "$1" ) ]] && echo "The argument need to be a valid branch name" && return

git push origin ${1}:master
}

git_branch_name () { git symbolic-ref --short -q HEAD; }

git_l () { git log --graph --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset' ; }
git_list () { git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short ; }
git_whatis () { git show -s --pretty='tformat:%h (%s, %ad)' --date=short ; }
git_pwhatis () { git show -s --pretty='tformat:%h, %s, %ad' --date=short ; }

git_rebase_local () {
local branch_name=$(git symbolic-ref --short -q HEAD)
git checkout master
git fetch -t --all
git pull --rebase
git checkout ${branch_name}
git pull --rebase . master
}

git_delete_branch () {
git checkout master
git fetch -p origin
git push origin --delete $1
git branch -D $1
git remote prune origin
git fetch -p origin
}

###########################################################

root_local_enable () {
local ROOT_BASEDIR TAG TAG_FOUND tag_list ROOT_INSTALL root_list
[[ -z "${tools}" ]] && { echo "tools env var not defined" ; return 1; }
[[ ! -d "${tools}" ]]&& { echo "${tools} directory does not exists" ; return 1; }

ROOT_BASEDIR="${tools}/ROOT"
pushd "${ROOT_BASEDIR}" &> /dev/null || { echo "Could not cd to ${ROOT_BASEDIR}"; return 1; }

root_list=$(command ls -1 --hide=BUILD --hide=root ${ROOT_BASEDIR}/)
[[ -z "${1}" ]] && { echo -e "TAG should be supplied as argument!! options:\n${root_list}"; return 1; }

TAG="${1}"
TAG_FOUND=""
IFS=' ' read -a tag_list <<< "$(echo ${root_list} | xargs)"
for i in "${tag_list[@]}"; do [[ "${i}" == "${TAG}" ]] && TAG_FOUND="y"; done
[[ -z "${TAG_FOUND}" ]] && { echo -e "${TAG} not found!! options:\n${root_list}"; return 1; }

unlink root &> /dev/null
ln -s "${TAG}" root
source "${ROOT_BASEDIR}/root/bin/thisroot.sh"
export C_INCLUDE_PATH="${C_INCLUDE_PATH}${C_INCLUDE_PATH:+:}${ROOTSYS}/include"
export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH}${CPLUS_INCLUDE_PATH:+:}${ROOTSYS}/include"
popd &> /dev/null
}

now_str () { date +%Y%m%d_%H%M%S; }

pic_date () { exiftool $1 | grep "Date/Time Original"; }
pic_info () { identify -format "Size : %wx%h ; DPI : %xx%y\n" $1; }

proc_info () { ps -eo pid,%cpu,rss,args | grep -i $1 | grep -v grep; }

# Prints the time given in seconds in hours, minutes, seconds
NiceTime () {
  local SS HH MM STR
  SS="$1"

  let "HH=SS / 3600"
  let "SS=SS % 3600"
  [ $HH -gt 0 ] && STR=" ${HH}h"

  let "MM=SS / 60"
  let "SS=SS % 60"
  [ $MM -gt 0 ] && STR="${STR} ${MM}m"

  [ $SS -gt 0 ] && STR="${STR} ${SS}s"
  [ "$STR" == "" ] && STR="0s"

  echo $STR

  #printf "%02dh %02dm %02ds" $HH $MM $SS
}

whereami () {
local host=$(hostname -s)
local fullhost=$(hostname -f)
[[ "$fullhost" = "sev.spacescience.ro" ]] && host="ISS"
echo $host
}

cxxflags () {
export CXXFLAGS='-march=native -mtune=native -O2'
export CFLAGS="${CXXFLAGS}"
}

mymake () {
local CPUS=$(grep processor /proc/cpuinfo | wc -l)
nohup time -p make -k -j${CPUS} >$(basename $PWD).out 2>$(basename $PWD).err &
}

mymake_stop () {
local CPUS=$(grep processor /proc/cpuinfo | wc -l)
nohup time -p make --stop -j${CPUS} >$(basename $PWD).out 2>$(basename $PWD).err &
}

eth_irq () {
        if [ "$1" = "all" ]; then
            local list_of_eth=$(ip link | grep -E -o "eth[0-99]");
            for eth in ${list_of_eth}; do
               grep --color ${eth} /proc/interrupts | cut -d \: -f 1 | awk '{print $1}'
            done;
        elif [ -n "$1" ]; then
            grep --color $1 /proc/interrupts | cut -d \: -f 1 | awk '{print $1}';
        else
            echo "Accepted arguments are : ";
            echo " all     : print IRQ's for all eth's";
            echo " ethX    : print IRQ for ethX";
        fi
}

ex () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)
                tar xjf $1
            ;;
            *.tar.gz)
                tar xzf $1
            ;;
            *.bz2)
                bunzip2 $1
            ;;
            *.rar)
                unrar x $1
            ;;
            *.gz)
                gunzip $1
            ;;
            *.tar)
                tar xf $1
            ;;
            *.tbz2)
                tar xjf $1
            ;;
            *.tgz)
                tar xzf $1
            ;;
            *.zip)
                unzip $1
            ;;
            *.Z)
                uncompress $1
            ;;
            *.7z)
                7z x $1
            ;;
            *)
                echo "'$1' cannot be extracted via extract()"
            ;;
        esac;
    else
        echo "'$1' is not a valid file";
    fi
}


files2Lower () {
    for file in *; do
        lc=$(echo "$file" | tr "[A-Z]" "[a-z]");
        [[ $lc != $file ]] && mv -i "$file" "$lc";
    done
}

mkcd () { mkdir $1 && cd $1; }

quote () { echo \'${1//\'/\'\\\'\'}\'; }

toLower () { echo $1 | tr "[:upper:]" "[:lower:]"; }
toUpper () { echo $1 | tr "[:lower:]" "[:upper:]"; }

tarxz () {
XZ_OPT="--check=sha256 -T0" tar cJ --acls --xattrs --selinux -f ${1}.tar.xz ${1}
}

diff_short ()    { diff --suppress-common-lines $1 $2; }
diff_u_short ()  { diff -u --suppress-common-lines $1 $2; }
diff_wu_short () { diff -wu --suppress-common-lines $1 $2; }

diff_long ()    { diff $1 $2; }
diff_u_long ()  { diff -u $1 $2; }
diff_wu_long () { diff -wu $1 $2; }

diff_code   () {
TMP1=$(mktemp ${TMPDIR:-/tmp}/diff-XXXXXX)
TMP2=$(mktemp ${TMPDIR:-/tmp}/diff-XXXXXX)
trap "rm -f $TMP1 $TMP2" RETURN

grep -Ev "^\s*#.*|^\s*\/\/.*|^$" "${1}" > ${TMP1}
grep -Ev "^\s*#.*|^\s*\/\/.*|^$" "${2}" > ${TMP2}
diff -u ${TMP1} ${TMP2}
}

diff_code_w   () {
TMP1=$(mktemp ${TMPDIR:-/tmp}/diff-XXXXXX)
TMP2=$(mktemp ${TMPDIR:-/tmp}/diff-XXXXXX)
trap "rm -f $TMP1 $TMP2" RETURN

grep -Ev "^\s*#.*|^\s*\/\/.*|^$" "${1}" > ${TMP1}
grep -Ev "^\s*#.*|^\s*\/\/.*|^$" "${2}" > ${TMP2}
diff -wu ${TMP1} ${TMP2}
}

root_compile () {
local FILE FN DIR NAME FULLNAME
FILE="${1}"
shift
FN="$(realpath ${FILE})"
DIR=$(dirname ${FN})
FULLNAME=$(basename -- ${FN})
NAME="${FULLNAME%.*}"
$(root-config --cxx --glibs --cflags --libs) "${@}" -o "${NAME}" ${FN}
}

root.sing () {
local SING_CMD EXEC
stat /cvmfs/unpacked.cern.ch/registry.hub.docker.com/rootproject &> /dev/null || { echo "no access"; return 1; }
SING_CMD="${1}"
if [[ "${SING_CMD}" == "shell" ]]; then
    shift
    singularity shell "${@}" /cvmfs/unpacked.cern.ch/registry.hub.docker.com/rootproject/root:latest
elif [[ "${SING_CMD}" == "run" ]]; then
    shift
    singularity run "${@}" /cvmfs/unpacked.cern.ch/registry.hub.docker.com/rootproject/root:latest
elif [[ "${SING_CMD}" == "exec" ]]; then
    shift
    singularity exec /cvmfs/unpacked.cern.ch/registry.hub.docker.com/rootproject/root:latest "${@}"
fi
}

transfer () {
    # check arguments
    if [ $# -eq 0 ]; then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    curl --version 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
      echo "Could not find curl."; return
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s; then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ]; then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d $file ]; then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile

    # cleanup
    rm -f $tmpfile
}

job_start_local () { cd $1 && (nohup ./cmd &>cmd_output.txt &) && cd .. ; }

uriencode () { jq -nr --arg v "${1}" '$v|@uri'; }

function __wget() {
    : ${DEBUG:=0}
    local URL=$1
    local tag="Connection: close"

    if [ -z "${URL}" ]; then
        printf "Usage: %s \"URL\" [e.g.: %s http://www.google.com/]" \
               "${FUNCNAME[0]}" "${FUNCNAME[0]}"
        return 1;
    fi
    read proto server path <<<$(echo ${URL//// })
    local SCHEME=${proto//:*}
    local PATH=/${path// //}
    local HOST=${server//:*}
    local PORT=${server//*:}

    [[ "$SCHEME" != "http" ]] && { printf "sorry, %s only support http\n" "${FUNCNAME[0]}"; return 1; }

    [[ x"${HOST}" == x"${PORT}" ]] && PORT=80
    [[ $DEBUG -eq 1 ]] && echo "SCHEME=$SCHEME" >&2
    [[ $DEBUG -eq 1 ]] && echo "HOST=$HOST" >&2
    [[ $DEBUG -eq 1 ]] && echo "PORT=$PORT" >&2
    [[ $DEBUG -eq 1 ]] && echo "PATH=$PATH" >&2

    exec 3<>/dev/tcp/${HOST}/$PORT
    [[ $? -ne 0 ]] && return $?

    echo -en "GET ${PATH} HTTP/1.1\r\nHost: ${HOST}\r\n${tag}\r\n\r\n" >&3
    [[ $? -ne 0 ]] && return $?

    # 0: at begin, before reading http response
    # 1: reading header
    # 2: reading body
    local state=0
    local num=0
    local code=0
    while read line; do
        num=$(($num + 1))
        # check http code
        if [ $state -eq 0 ]; then
            if [ $num -eq 1 ]; then
                if [[ $line =~ ^HTTP/1\.[01][[:space:]]([0-9]{3}).*$ ]]; then
                    code="${BASH_REMATCH[1]}"
                    if [[ "$code" != "200" ]]; then
                        printf "failed to wget '%s', code is not 200 (%s)\n" "$URL" "$code"
                        exec 3>&-
                        return 1
                    fi
                    state=1
                else
                    printf "invalid http response from '%s'" "$URL"
                    exec 3>&-
                    return 1
                fi
            fi
        elif [ $state -eq 1 ]; then
            if [[ "$line" == $'\r' ]]; then
                # found "\r\n"
                state=2
            fi
        elif [ $state -eq 2 ]; then
            # redirect body to stdout
            # TODO: any way to pipe data directly to stdout?
            echo "$line"
        fi
    done <&3
    exec 3>&-
}

make_qr () { printf "$@" | curl -F-=\<- qrenco.de ; }

meteo () {
    if [[ "${1}" == "nice" ]]; then
        local request="wttr.in/Bucharest?format=v2"
    else
        local request="wttr.in/Bucharest?mMAFq${1}"
    fi
    curl -H "Accept-Language: ${LANG%_*}" --compressed "${request}"
}

jpy_compile () {
    DIR=$(dirname $(which alien.py))
    pushd "${DIR}"
    python3 -OO -m py_compile alien.py
    popd
}

jpy () { python3 $(which alien.py) "${@}" ;}

