#!/bin/bash
#####################
###   FUNCTIONS   ###
#####################

functions_list ()      { declare -f; }
functions_list_name () { declare -F; }
functions_show_def ()  { declare -f $1; }

SourceIfValid () { [[ -f $1 ]] && source $1; }

__PATH_INS () { [[ "$PATH" =~ "$1" ]] && return 0; [[ -z $PATH ]] && export PATH=$1 || export PATH=$1:$PATH; }
__PATH_ADD () { [[ "$PATH" =~ "$1" ]] && return 0; [[ -z $PATH ]] && export PATH=$1 || export PATH=$PATH:$1; }

__LDLIB_INS () { [[ "$LD_LIBRARY_PATH" =~ "$1" ]] && return 0; [[ -z $LD_LIBRARY_PATH ]] && export LD_LIBRARY_PATH=$1 || export LD_LIBRARY_PATH=$1:$LD_LIBRARY_PATH ; }
__LDLIB_ADD () { [[ "$LD_LIBRARY_PATH" =~ "$1" ]] && return 0; [[ -z $LD_LIBRARY_PATH ]] && export LD_LIBRARY_PATH=$1 || export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$1 ; }

__PYPATH_INS () { [[ "$PYTHONPATH" =~ "$1" ]] && return 0; [[ -z $PYTHONPATH ]] && export PYTHONPATH=$1 || export PYTHONPATH=$1:$PYTHONPATH; }
__PYPATH_ADD () { [[ "$PYTHONPATH" =~ "$1" ]] && return 0; [[ -z $PYTHONPATH ]] && export PYTHONPATH=$1 || export PYTHONPATH=$PYTHONPATH:$1; }

__MANPATH_INS () { [[ "$MANPATH" =~ "$1" ]] && return 0; [[ -z $MANPATH ]] && export MANPATH=$1 || export MANPATH=$1:$MANPATH; }
__MANPATH_ADD () { [[ "$MANPATH" =~ "$1" ]] && return 0; [[ -z $MANPATH ]] && export MANPATH=$1 || export MANPATH=$MANPATH:$1; }

## CVMFS ALICE functions

cvmfs_load_alicephys_latest () {
local latest
latest=$(/cvmfs/alice.cern.ch/bin/alienv -l avail AliPhysics 2>&1 | awk '/AliPhysics\/vAN/ && !/ROOT6/ {gsub ("AliPhysics/","",$1); print;}' | sort -k2 | awk 'END {print $1}') #'
eval $(/cvmfs/alice.cern.ch/bin/alienv printenv VO_ALICE@AliPhysics::${latest})
}

cvmfs_enter_alicephys_latest () {
local latest
latest=$(/cvmfs/alice.cern.ch/bin/alienv -l avail AliPhysics 2>&1 | awk '/AliPhysics\/vAN/ && !/ROOT6/ {gsub ("AliPhysics/","",$1); print;}' | sort -k2 | awk 'END {print $1}') #'
/cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@AliPhysics::${latest}
}

cvmfs_load_alicephys_r6_latest () {
local latest
latest=$(/cvmfs/alice.cern.ch/bin/alienv -l avail AliPhysics 2>&1 | awk '/AliPhysics/ && /ROOT6/ {gsub ("AliPhysics/","",$1); print;}' | sort -k2 | awk 'END {print $1}') #'
eval $(/cvmfs/alice.cern.ch/bin/alienv printenv VO_ALICE@AliPhysics::${latest})
}

cvmfs_enter_alicephys_r6_latest () {
local latest
latest=$(/cvmfs/alice.cern.ch/bin/alienv -l avail AliPhysics 2>&1 | awk '/AliPhysics/ && /ROOT6/ {gsub ("AliPhysics/","",$1); print;}' | sort -k2 | awk 'END {print $1}') #'
/cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@AliPhysics::${latest}
}

__cvmfs_enabled () { [[ "${ALICE_ENV}" == "1" ]] && echo "#CVMFS"; }
__cvmfs_get_aliphys () { /cvmfs/alice.cern.ch/bin/alienv -t list 2>&1 | awk -F"/" '/AliPhysics/ {print ":"$2"#"}'; }

## aliBuild ALICE functions
alias alibuild='aliBuild'

loaded_aliphys () { alienv list 2>&1| sed -r 's#[0-9]+\) #\n#g;' | grep AliPhysics; }

alibuild_list_inits  () {
[[ -z "${ALIBUILD_WORK_DIR}" ]] && { echo "ALIBUILD_WORK_DIR not defined"; return 1; }
ls -1 --hide=sw ${ALIBUILD_WORK_DIR}/..
}

alibuild_list_builds () {
[[ -z "${ALIBUILD_WORK_DIR}" ]] && { echo "ALIBUILD_WORK_DIR not defined"; return 1; }

local ALIBUILD_ARCH
ALIBUILD_ARCH=$(aliBuild architecture);
[[ -z "${ALIBUILD_ARCH}" ]] && { echo "aliBuild architecture could not be determined"; return 1; }
/usr/bin/find ${ALIBUILD_WORK_DIR}/${ALIBUILD_ARCH}/AliPhysics -mindepth 1 -maxdepth 1 -type d -printf "%f\n";
}

alibuild_list_links  () {
[[ -z "${ALIBUILD_WORK_DIR}" ]] && { echo "ALIBUILD_WORK_DIR not defined"; return 1; }

local ALIBUILD_ARCH
ALIBUILD_ARCH=$(aliBuild architecture);
[[ -z "${ALIBUILD_ARCH}" ]] && { echo "aliBuild architecture could not be determined"; return 1; }
/usr/bin/find ${ALIBUILD_WORK_DIR}/${ALIBUILD_ARCH}/AliPhysics -mindepth 1 -maxdepth 1 -type l -printf "%f -> %l\n";
}

alibuild_list_labels () {
[[ -z "${ALIBUILD_WORK_DIR}" ]] && { echo "ALIBUILD_WORK_DIR not defined"; return 1; }

local ALIBUILD_ARCH
ALIBUILD_ARCH=$(aliBuild architecture);
[[ -z "${ALIBUILD_ARCH}" ]] && { echo "aliBuild architecture could not be determined"; return 1; }

/usr/bin/find ${ALIBUILD_WORK_DIR}/${ALIBUILD_ARCH}/AliPhysics -mindepth 1 -maxdepth 1 -printf "%f\n";
}

alibuild_init        () {
local CURDIR
CURDIR=$(pwd)
[[ -z "${ALIBUILD_WORK_DIR}" ]] && { echo "ALIBUILD_WORK_DIR not defined"; return 1; }

[[ -z "${1}" ]] && { echo "Argument needed : the tag name of build"; return 1; }

cd ${ALIBUILD_WORK_DIR}/..

aliBuild init AliRoot,AliPhysics -z ${1};
cd "${CURDIR}"
}

alibuild_build        () {
local CURDIR
CURDIR=$(pwd)
[[ -z "${ALIBUILD_WORK_DIR}" ]] && { echo "ALIBUILD_WORK_DIR not defined"; return 1; }
[[ -z "${1}" ]] && { echo "Argument needed : the tag name of build"; return 1; }
local BUILDNAME
BUILDNAME="${1}"
shift

cd ${ALIBUILD_WORK_DIR}/../${BUILDNAME} || { echo "Could not cd to build name directory"; return 1; }
pwd
ALIBUILD_ARCH=$(aliBuild architecture);
ARCH_ARG="--force-unknown-architecture"
[[ "${ALIBUILD_ARCH}" == "slc7_x86-64" ]] && ARCH_ARG="--architecture ${ALIBUILD_ARCH}"

DEPS=""
[[ "${ALIBUILD_ARCH}" == "slc7_x86-64" ]] && DEPS="--no-system"

CMD="aliBuild ${ARCH_ARG} ${DEPS} -z -w ../sw -d $@"
echo "${CMD}"
eval "${CMD}"

cd "${CURDIR}"
}

alibuild_build_distcc        () {
alias cc='distcc cc'
alias c++='distcc c++'
alias gcc='distcc gcc'
alias g++='distcc g++'

alibuild_build "$@"
}

alibuild_build_latest    () { alibuild_build ali-latest    build AliPhysics --defaults user "$@";}
alibuild_build_latest_r6 () { alibuild_build ali-latest-r6 build AliPhysics --defaults user-root6 "$@"; }
alibuild_build_latest_r6_next () { alibuild_build ali-latest-r6-next build AliPhysics --defaults user-next-root6 "$@"; }

alibuild_build_roounfold () { alibuild_build ali-latest-r6 build RooUnfold  --defaults user-root6 "$@"; }
alibuild_build_roounfold_next () { alibuild_build ali-latest-r6-next build RooUnfold  --defaults user-next-root6 "$@"; }

alibuild_clean  () {
local CURDIR=$(pwd -P);
for ali in $(ls  --hide=sw $ALIBUILD_WORK_DIR/..); do
    cd $ALIBUILD_WORK_DIR/../${ali} && aliBuild clean --aggressive-cleanup;
done;
cd "${CURDIR}";
}

alibuild_load_latest ()    {
alienv load AliPhysics/ali-latest-1;
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib64:/usr/lib64:/usr/local/lib:/usr/lib;

if [[ "${1}" == "inc" ]]; then
    export C_INCLUDE_PATH=${VC_ROOT}/include:${GSL_ROOT}/include:${CGAL_ROOT}/include:${FASTJET_ROOT}/include:${ROOTSYS}/include:${ALICE_ROOT}/include:${ALICE_PHYSICS}/include
    export CPLUS_INCLUDE_PATH=${C_INCLUDE_PATH}
fi
}

alibuild_load_latest_r6 () {
alienv load AliPhysics/ali-latest-r6-1;
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib64:/usr/lib64:/usr/local/lib:/usr/lib;

if [[ "${1}" == "inc" ]]; then
    export C_INCLUDE_PATH=${VC_ROOT}/include:${GSL_ROOT}/include:${CGAL_ROOT}/include:${FASTJET_ROOT}/include:${ROOTSYS}/include:${ALICE_ROOT}/include:${ALICE_PHYSICS}/include
    export CPLUS_INCLUDE_PATH=${C_INCLUDE_PATH}
fi
}

alibuild_load_latest_r6_next () {
alienv load AliPhysics/ali-latest-r6-next-1;
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib64:/usr/lib64:/usr/local/lib:/usr/lib;

if [[ "${1}" == "inc" ]]; then
    export C_INCLUDE_PATH=${VC_ROOT}/include:${GSL_ROOT}/include:${CGAL_ROOT}/include:${FASTJET_ROOT}/include:${ROOTSYS}/include:${ALICE_ROOT}/include:${ALICE_PHYSICS}/include
    export CPLUS_INCLUDE_PATH=${C_INCLUDE_PATH}
fi
}


###########################################################
##   GIT
git_push2master_current () {
local branch_name=$(git symbolic-ref --short -q HEAD)
git push origin ${branch_name}:master
}

git_push2master_byname () {
[[ -z $1 ]] && echo "An argument is needed : the branch name" && return

local branch_list=$(git branch -l)
[[ !( "$branch_list" =~ "$1" ) ]] && echo "The argument need to be a valid branch name" && return

git push origin ${1}:master
}

git_branch_name () { git symbolic-ref --short -q HEAD; }

git_l () { git log --graph --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset' ; }
git_list () { git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short ; }
git_whatis () { git show -s --pretty='tformat:%h (%s, %ad)' --date=short ; }
git_pwhatis () { git show -s --pretty='tformat:%h, %s, %ad' --date=short ; }

git_rebase_local () {
local branch_name=$(git symbolic-ref --short -q HEAD)
git checkout master
git fetch -t --all
git pull --rebase
git checkout ${branch_name}
git pull --rebase . master
}

git_delete_branch () {
git checkout master
git fetch -p origin
git push origin --delete $1
git branch -D $1
git remote prune origin
git fetch -p origin
}

###########################################################

now_str () { date +%Y%m%d_%H%M%S; }

pic_date () { exiftool $1 | grep "Date/Time Original"; }
pic_info () { identify -format "Size : %wx%h ; DPI : %xx%y\n" $1; }

proc_info () { ps -eo pid,%cpu,rss,args | grep -i $1 | grep -v grep; }

# Prints the time given in seconds in hours, minutes, seconds
NiceTime () {
  local SS HH MM STR
  SS="$1"

  let "HH=SS / 3600"
  let "SS=SS % 3600"
  [ $HH -gt 0 ] && STR=" ${HH}h"

  let "MM=SS / 60"
  let "SS=SS % 60"
  [ $MM -gt 0 ] && STR="${STR} ${MM}m"

  [ $SS -gt 0 ] && STR="${STR} ${SS}s"
  [ "$STR" == "" ] && STR="0s"

  echo $STR

  #printf "%02dh %02dm %02ds" $HH $MM $SS
}

whereami () {
local host=$(hostname -s)
local fullhost=$(hostname -f)
[[ "$fullhost" = "sev.spacescience.ro" ]] && host="ISS"
echo $host
}


cxxflags () {
CXXFLAGS='-march=native -O2'

local avx_enable=$(grep avx /proc/cpuinfo &> /dev/null && echo yes)
[[ ${avx_enable} == "yes" ]] && CXXFLAGS="${CXXFLAGS} -mavx"

export CXXFLAGS
export CFLAGS=${CXXFLAGS}
}

mymake () {
local CPUS=$(grep processor /proc/cpuinfo | wc -l)
nohup time -p make -k -j${CPUS} >$(basename $PWD).out 2>$(basename $PWD).err &
}

mymake_stop () {
local CPUS=$(grep processor /proc/cpuinfo | wc -l)
nohup time -p make --stop -j${CPUS} >$(basename $PWD).out 2>$(basename $PWD).err &
}

eth_irq () {
        if [ "$1" = "all" ]; then
            local list_of_eth=$(ip link | grep -E -o "eth[0-99]");
            for eth in ${list_of_eth}; do
               grep --color ${eth} /proc/interrupts | cut -d \: -f 1 | awk '{print $1}'
            done;
        elif [ -n "$1" ]; then
            grep --color $1 /proc/interrupts | cut -d \: -f 1 | awk '{print $1}';
        else
            echo "Accepted arguments are : ";
            echo " all     : print IRQ's for all eth's";
            echo " ethX    : print IRQ for ethX";
        fi
}

ex () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)
                tar xjf $1
            ;;
            *.tar.gz)
                tar xzf $1
            ;;
            *.bz2)
                bunzip2 $1
            ;;
            *.rar)
                unrar x $1
            ;;
            *.gz)
                gunzip $1
            ;;
            *.tar)
                tar xf $1
            ;;
            *.tbz2)
                tar xjf $1
            ;;
            *.tgz)
                tar xzf $1
            ;;
            *.zip)
                unzip $1
            ;;
            *.Z)
                uncompress $1
            ;;
            *.7z)
                7z x $1
            ;;
            *)
                echo "'$1' cannot be extracted via extract()"
            ;;
        esac;
    else
        echo "'$1' is not a valid file";
    fi
}


files2Lower () {
    for file in *; do
        lc=$(echo "$file" | tr "[A-Z]" "[a-z]");
        [[ $lc != $file ]] && mv -i "$file" "$lc";
    done
}

mkcd () { mkdir $1 && cd $1; }

quote () { echo \'${1//\'/\'\\\'\'}\'; }

toLower () { echo $1 | tr "[:upper:]" "[:lower:]"; }
toUpper () { echo $1 | tr "[:lower:]" "[:upper:]"; }

tarxz () {
XZ_OPT="--check=sha256 -T0" tar cJ --acls --xattrs --selinux -f ${1}.tar.xz ${1}
}

diff_short ()    { diff --suppress-common-lines $1 $2; }
diff_u_short ()  { diff -u --suppress-common-lines $1 $2; }
diff_wu_short () { diff -wu --suppress-common-lines $1 $2; }

diff_long ()    { diff $1 $2; }
diff_u_long ()  { diff -u $1 $2; }
diff_wu_long () { diff -wu $1 $2; }

diff_code   () { diff  -u "$@" <(grep -vE '^\s*(#|$|//)' $1)  <(grep -vE '^\s*(#|$|//)' $2); }
diff_code_w () { diff -wu "$@" <(grep -vE '^\s*(#|$|//)' $1)  <(grep -vE '^\s*(#|$|//)' $2); }

g++root () {
g++ $(root-config --libs) $(root-config --cflags) "${@}"
}

root-module () {
  if [ $# -lt 1 ] ; then
    echo "root-module need exactly one argument"
    return 1
  fi

  local name=$(basename $1 .cxx)
  local root_cflags = $(root-config --cflags)

  g++ -fPIC -Wall -g -c $name.cxx -o $name.o ${root_cflags}
  rootcint -f ${name}Cint.cxx -c ${name}.h
  g++ -fPIC -Wall -g -c ${name}Cint.cxx -o ${name}Cint.o ${root_cflags}
  g++ -fPIC -shared -Wl,-soname,${name}.so -o ${name}.so ${name}Cint.o ${name}.o
  rm -f ${name}Cint.cxx ${name}Cint.h ${name}Cint.o ${name}.o
}


transfer () {
    # check arguments
    if [ $# -eq 0 ]; then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    curl --version 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
      echo "Could not find curl."; return
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s; then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ]; then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d $file ]; then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile

    # cleanup
    rm -f $tmpfile
}

job_start_local () { cd $1 && (nohup ./cmd &>cmd_output.txt &) && cd .. ; }

date_baby () {
    local d1=$(date -d "$1" +%s)
    local d2=$(date +%s)
    echo $(( (d2 - d1) / 86400 )) days
}

function __wget() {
    : ${DEBUG:=0}
    local URL=$1
    local tag="Connection: close"

    if [ -z "${URL}" ]; then
        printf "Usage: %s \"URL\" [e.g.: %s http://www.google.com/]" \
               "${FUNCNAME[0]}" "${FUNCNAME[0]}"
        return 1;
    fi
    read proto server path <<<$(echo ${URL//// })
    local SCHEME=${proto//:*}
    local PATH=/${path// //}
    local HOST=${server//:*}
    local PORT=${server//*:}

    [[ "$SCHEME" != "http" ]] && { printf "sorry, %s only support http\n" "${FUNCNAME[0]}"; return 1; }

    [[ x"${HOST}" == x"${PORT}" ]] && PORT=80
    [[ $DEBUG -eq 1 ]] && echo "SCHEME=$SCHEME" >&2
    [[ $DEBUG -eq 1 ]] && echo "HOST=$HOST" >&2
    [[ $DEBUG -eq 1 ]] && echo "PORT=$PORT" >&2
    [[ $DEBUG -eq 1 ]] && echo "PATH=$PATH" >&2

    exec 3<>/dev/tcp/${HOST}/$PORT
    [[ $? -ne 0 ]] && return $?

    echo -en "GET ${PATH} HTTP/1.1\r\nHost: ${HOST}\r\n${tag}\r\n\r\n" >&3
    [[ $? -ne 0 ]] && return $?

    # 0: at begin, before reading http response
    # 1: reading header
    # 2: reading body
    local state=0
    local num=0
    local code=0
    while read line; do
        num=$(($num + 1))
        # check http code
        if [ $state -eq 0 ]; then
            if [ $num -eq 1 ]; then
                if [[ $line =~ ^HTTP/1\.[01][[:space:]]([0-9]{3}).*$ ]]; then
                    code="${BASH_REMATCH[1]}"
                    if [[ "$code" != "200" ]]; then
                        printf "failed to wget '%s', code is not 200 (%s)\n" "$URL" "$code"
                        exec 3>&-
                        return 1
                    fi
                    state=1
                else
                    printf "invalid http response from '%s'" "$URL"
                    exec 3>&-
                    return 1
                fi
            fi
        elif [ $state -eq 1 ]; then
            if [[ "$line" == $'\r' ]]; then
                # found "\r\n"
                state=2
            fi
        elif [ $state -eq 2 ]; then
            # redirect body to stdout
            # TODO: any way to pipe data directly to stdout?
            echo "$line"
        fi
    done <&3
    exec 3>&-
}

meteo () {
    if [[ "${1}" == "nice" ]]; then
        local request="wttr.in/Bucharest?format=v2"
    else
        local request="wttr.in/Bucharest?mMAFq${1}"
    fi
    curl -H "Accept-Language: ${LANG%_*}" --compressed "${request}"
}

gogo () { python2 ${HOME}/bin/gogo.py "${@}" ;}

j_py_compile () {
    local DIR CURDIR
    CURDIR=$(pwd)
    DIR=$(dirname $(which alien.py))
    cd "${DIR}"
    python3 -OO -m py_compile alien.py
    cd "${CURDIR}"
}

j ()          { python3 ${HOME}/bin/alien.py "${@}" ;}
j_json ()     { python3 ${HOME}/bin/alien_json "${@}" ;}
j_json_all () { python3 ${HOME}/bin/alien_json_all "${@}" ;}

