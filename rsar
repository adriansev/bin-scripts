#!/bin/bash
# rsar v0.1.2 last mod 2015/07/01
# Latest version at <http://github.com/ryran/rsar>
# RPM packages available at <http://people.redhat.com/rsawhill/rpms>
# Copyright 2012-2013, 2015 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#
#-------------------------------------------------------------------------------

# Get version from line #2
version=$(sed '2q;d' $0)

# ==============================================================================
# ENVIRONMENT VARIABLES -- Modify these by setting them in your shell
# environment, e.g. ~/.bash_profile or /etc/profile.d/rsar.sh
#
# COLORS
#
#   RSAR_COLORS (bool: y/n)
#     Controls whether color (bolding) is enabled or disabled by default
#     Cannot be controlled by cmdline arg
      [[ -z $RSAR_COLORS ]] && RSAR_COLORS=y
#
# ==============================================================================

# Colors
if [[ $RSAR_COLORS == y ]]; then
  reset='\033[0;0m'
  bold='\033[1;1m'
  red='\033[1;31m'
else
  unset reset bold red
fi

# GNU getopt option definitions:
saropts='A:bBcdHI:n:P:qrRSuvwWy'
extraopts='N:D:zt:x:'
shortopts=$saropts$extraopts
longopts='12hr,hn,noxh'


VERSINFO() {
  echo "Version info: ${version:2}
See <github.com/ryran/xsos> to report bugs or suggestions"
  exit
}

HELP_USAGE() {
  printf "Usage: ${bold}rsar SARFILE${reset}... [${bold}--12hr${reset}] [${bold}--hn${reset}] [${bold}--noxh${reset}] [${bold}-t TIME${reset}] [${bold}SAROPTS${reset}] [${bold}DRILLDOWN${reset}]
 SAROPTS is any mix of: [${bold}-AbBcdHInqrRSuvwWy${reset}]
 DRILLDOWN is any mix of: [${bold}-P CPU${reset}] [${bold}-D DISK${reset}] [${bold}-N NIC${reset}]
 Note that getopt is used for arg-parsing (so argument order is arbitrary)
"
}

HELP_EXTENDED() {
  HELP_USAGE
  printf "
rsar requires at least 1 plaintext sar data file (optionally-compressed)
  Spaces in SARFILE name or path will break things (complain if you care)
  Supported file extensions for compressed sar files:
    z, gz, gzip, b, b2, bz, bz2, bzip, bzip2, x, xz, lzma
    
Opts Specific to rsar:
  ${bold}--12hr${reset}         Switch input format from default 24-hr to 12-hr AM/PM
  ${bold}--hn${reset}           Show hostname/kernel version lines from each sar file
  ${bold}--noxh${reset}         Hide extra column header lines (usually indicative of reboots)
  ${bold}-t${reset} <TIME>      Where TIME is a regex for time period to display
                   Ex: '^1[2-5]' or ':[23]0:' or '^(0.:40|2.:40)' or '^12.*AM'
  ${bold}-x${reset} <PATTERN>   Where PATTERN is used to select a section
                   Ex: 'svctm', 'iowait', 'runq', 'proc|cswch'
                   Recommended to stick with below sar opts to avoid collisions
  ${bold}-z${reset}             Disable showing 'Average:' lines
                   Hint: To show _only_ 'Average:' lines, use ${bold}-t Av${reset}

Standard sar Selection Opts:
  ${bold}-A${reset} { 5 | 6 | 7 }
          Like ${bold}sar -A${reset}: alias for all selection opts (excl. ${bold}-d${reset} & ${bold}-n${reset})
            The required number corresponds with a major RHEL version
  ${bold}-b${reset}      I/O and transfer rate statistics
  ${bold}-B${reset}      Paging statistics
  ${bold}-c${reset}      Process creation statistics
  ${bold}-d${reset}      Block device statistics
  ${bold}-H${reset}      Hugepages utilization statistics
  ${bold}-I${reset} { SUM }
          Interrupts statistics
  ${bold}-n${reset} { <KEYWORD> [,...] | ALL }
          Network statistics
            KEYWORD may be any of the following (case-insensitive):
            ${bold}DEV${reset}    Network interfaces
            ${bold}EDEV${reset}   Network interfaces (errors)
            ${bold}NFS${reset}    NFS client
            ${bold}NFSD${reset}   NFS server
            ${bold}SOCK${reset}   Sockets      (v4)
            ${bold}IP${reset}     IP traffic   (v4)
            ${bold}EIP${reset}    IP traffic   (v4) (errors)
            ${bold}ICMP${reset}   ICMP traffic (v4)
            ${bold}EICMP${reset}  ICMP traffic (v4) (errors)
            ${bold}TCP${reset}    TCP traffic  (v4)
            ${bold}ETCP${reset}   TCP traffic  (v4) (errors)
            ${bold}UDP${reset}    UDP traffic  (v4)
            ${bold}SOCK6${reset}  Sockets      (v6)
            ${bold}IP6${reset}    IP traffic   (v6)
            ${bold}EIP6${reset}   IP traffic   (v6) (errors)
            ${bold}ICMP6${reset}  ICMP traffic (v6)
            ${bold}EICMP6${reset} ICMP traffic (v6) (errors)
            ${bold}UDP6${reset}   UDP traffic  (v6)
  ${bold}-q${reset}      Queue length and load average statistics
  ${bold}-r${reset}      Memory utilization statistics
  ${bold}-R${reset}      Memory statistics
  ${bold}-S${reset}      Swap space utilization statistics
  ${bold}-u${reset}      CPU utilization statistics
  ${bold}-v${reset}      Kernel table statistics
  ${bold}-w${reset}      System switching statistics
  ${bold}-W${reset}      Swapping statistics
  ${bold}-y${reset}      TTY device statistics
  
  Note that args passed to ${bold}-I${reset} & ${bold}-n${reset} & ${bold}-P${reset} are cumulative and case-insensitive
    Ex: ${bold}-n Dev,eDEV${reset} works, as does ${bold}-n Dev -n eDEV -n icmp${reset} as does ${bold}-nALL${reset}
        ${bold}-P all${reset} works, as does ${bold}-P 0,4,7${reset}, as does ${bold}-P0 -P 4 -P 3. -P '[78]|22'${reset}

Drill-Down Opts:
  ${bold}-P${reset} { <CPU> [,...] | ALL }
              Where CPU can be comma-separated list of CPU-numbers (like sar)
                Else, if 'ALL' is used, then everything will be shown
                Unlike with sar, CPU can also be a regex
                Ex: '1,4,6' or '1|4|6' or '0,[1-3]0'
  ${bold}-D${reset} <DISK>   Where DISK is a regex for which block devices to select
                Ex: 'dev8-16' or '7.$' or 'sda2|rootlv'
  ${bold}-N${reset} <NIC>    Where NIC is a regex for which network interfaces to select
                Ex: 'eth0' or 'eth[12]' or 'bond[1-3]|em1'

Examples:
  rsar sar03 -qut ^2
  rsar sar03 -P all -t Average
  rsar -t^09:30 -n edev,sock -N eth3 -I sum sar19.bz2
  rsar -x iowait -P [0-3] -t^15:30 /tmp/sar26.gz /tmp/sar27.xz -RB

Color:
  Disable color and bold formatting by setting the environment variable
  RSAR_COLORS to 'no'
  
"
  VERSINFO
}


# Help? Version? Update?
case $1 in
  -\?|-h)           HELP_EXTENDED
;;
  --help|help)      HELP_EXTENDED
;;
  --vers|--version) VERSINFO
;;
  --update)         HELP_USAGE; exit
esac

# If BASH is not v4+, fail
if [[ $BASH_VERSINFO -lt 4 ]]; then
  printf "rsar: Requires BASH v4.0 or higher (RHEL6/Fedora11 and above)\n\n" >&2
  exit 32
fi


# Check for bad switches
getopt -Q --name=rsar -o $shortopts -l $longopts -- "$@" || { echo >&2; HELP_USAGE; exit 64; }

# Setup file-input array
declare -A Input


# Check that we have what appears to be a good sar file
SARFILECHECK() {
  # Does file exist?
  [[ -f $1 ]] || { echo "rsar: Cannot access '$1': No such file or directory" >&2; return 66; }
  
  # Set local vars
  local err file unzip
  err="rsar: Unable to read '$1'"
  shopt -qs nocasematch  # Enable case-insensitive comparison
  file=$(file -bL -e encoding -e cdf -e compress -e elf -e tar -e soft $1 2>/dev/null)
  
  # Is file readable?
  if [[ ! -r $1 ]]; then
    echo "${err}: Permission denied" >&2
    return 77
  
  # Is file plain-text?
  elif [[ ${file:0:5} == ASCII ]]; then
    # Set cat as the handler for the file
    Input[$1]=cat
  
  # So file is binary data, but is it compressed?
  else
    # Check file extension for standard extension indicating compression
    case ${1##*.} in
      z|gz|gzip)          unzip=zcat
        ;;
      bz|bz2|bzip|bzip2)  unzip=bzcat
        ;;
      lzma|x|xz)          unzip=xzcat
        ;;
      # No extension we can deal with; game over man
      *)  echo -e "${err}: Not a plain-text (optionally-compressed) sar file" >&2
          return 65
    esac
    # Set the appropriate unzip cmd as the handler for file
    Input[$1]=$unzip
  fi
  shopt -qu nocasematch  # Disable case-insensitive comparison
}


__CHECK_ARGS_A() {
  shopt -qs nocasematch  # Enable case-insensitive comparison
  case "$1" in
    5|6|7)
        ;;
    *)
        echo "rsar: Invalid argument to option: '-A'" >&2
        echo "Hint: Use BASH tab-completion after typing '-A'" >&2
        echo "Currently-valid args are: 5, 6, or 7" >&2
        exit 64
  esac
  shopt -qu nocasematch  # Disable case-insensitive comparison
}

__CHECK_ARGS_I() {
  shopt -qs nocasematch  # Enable case-insensitive comparison
  case "$1" in
    SUM)
        ;;
    *)
        echo "rsar: Invalid argument to option: '-I'" >&2
        echo "Hint: Use BASH tab-completion after typing '-I'" >&2
        echo "Currently-valid args are: SUM" >&2
        exit 64
  esac
  shopt -qu nocasematch  # Disable case-insensitive comparison
}


__CHECK_ARGS_n() {
  shopt -qs nocasematch  # Enable case-insensitive comparison
  local k
  for k in $(sed 's/,/ /g' <<<"$1"); do
    case $k in
      ALL|DEV|EDEV|NFS|NFSD|SOCK|IP|EIP|ICMP|EICMP|TCP|ETCP|UDP|SOCK6|IP6|EIP6|ICMP6|EICMP6|UDP6)
          ;;
      *)
          echo "rsar: Invalid argument to option: '-n'" >&2
          echo "Use BASH tab-completion after '-n' to see most common choices" >&2
          echo -e "See ${bold}rsar -h${reset} for full list" >&2
          exit 64
    esac
  done
  shopt -qu nocasematch  # Disable case-insensitive comparison
}

    
__SPLIT_ARGS() {
  shopt -qs nocasematch  # Enable case-insensitive comparison
  if [[ $1 == cpu ]]; then
    # If handling cpu args in standard sar format (i.e., comma-separated),
    # strip leading/trailing commas & replace commas with regex pipe
    grep -q , <<<"${2^^}" &&
      sed -re "s/(^,*|,*$)//g" -e "s/,/|/g" <<<"${2^^}" ||
      # Otherwise, if no commas, treat literally (i.e., as regex)
      echo "${2^^}"
  else
    # Otherwise, strip leading/trailing commas & replace commas with spaces
    sed -re "s/(^,*|,*$)//g" -e "s/^/$1/" -e "s/,/ $1/g" <<<"${2^^}"
  fi
  shopt -qu nocasematch  # Disable case-insensitive comparison
}


# Parse command-line arguments
PARSE() {
  # Local vars
  local file errs
  
  # Run through all of our arguments
  until [[ $1 = -- ]]; do
    case "$1" in
      # Standard sar selection options
      -b)   Selection="$Selection iotransf" ; shift ;;
      -B)   Selection="$Selection paging"   ; shift ;;
      -c)   Selection="$Selection process"  ; shift ;;
      -d)   Selection="$Selection blockdev" ; shift ;;
      -H)   Selection="$Selection hugepage" ; shift ;;
      -q)   Selection="$Selection queue"    ; shift ;;
      -r)   Selection="$Selection memutil"  ; shift ;;
      -R)   Selection="$Selection mempages" ; shift ;;
      -S)   Selection="$Selection memswap"  ; shift ;;
      -u)   Selection="$Selection cpuutil"  ; shift ;;
      -v)   Selection="$Selection kerntbls" ; shift ;;
      -w)   Selection="$Selection cswitch"  ; shift ;;
      -W)   Selection="$Selection swapping" ; shift ;;
      -y)   Selection="$Selection tty"      ; shift ;;
      # Alias for all options
      -A)   __CHECK_ARGS_A "$2" ; SelectAllOptsVers=$2    ; shift 2 ;;
      # Interrupt selection options
      -I)   __CHECK_ARGS_I "$2" &&
            Selection="$Selection $(__SPLIT_ARGS int $2)" ; shift 2 ;;
      # Net selection options
      # Have to save these to a different var and check later because of possibility of using ALL
      -n)   __CHECK_ARGS_n "$2"
            NetSelect="$NetSelect $(__SPLIT_ARGS net $2)" ; shift 2 ;;
      # Processor selection options
      -P)   Cpus="$Cpus|$(__SPLIT_ARGS cpu $2)"           ; shift 2 ;;
      # Other options
      -t)       Time=$2               ; shift 2 ;;
      -x)       DirectSrch=$2         ; shift 2 ;;
      -D)       BlockDevs=$2          ; shift 2 ;;
      -N)       NetDevs=$2            ; shift 2 ;;
      -z)       ShowAverage=no        ; shift ;;
      --12hr)   TimeFmt=12hr          ; shift ;;
      --hn)     ShowHostname=yes      ; shift ;;
      --noxh)   ShowExtraHeaders=no   ; shift ;;
    esac
  done
  shift  # (to get rid of the '--')
  
  # Quit with err & usage if no file given
  [[ -z $1 ]] && { echo -e "rsar: Need at least 1 plain-text sar file (optionally-compressed) to continue\n" >&2; HELP_USAGE; exit 1; }
  
  # Check each file; if bad, print err; if good, add to our input array
  for file in $@; do
    SARFILECHECK $file || errs=1
  done
  
  # If files were given, but none of them were good, exit now
  [[ -z ${Input[@]} ]] && { echo >&2; HELP_USAGE; exit 1; }
  
  # If we had some file errs, but can continue, add extra space to stderr
  [[ -n $errs ]] && echo >&2
}


# Call the parser
PARSE $(getopt -u --name=rsar -o $shortopts -l $longopts -- "$@")


# Whether to show hostname & kernel vers heading lines (hidden by default)
[[ -z $ShowHostname ]] && ShowHostname='no'

# Whether to show extra header lines (show all by default)
# These are the lines that give names to the columns of data
[[ -z $ShowExtraHeaders ]] && ShowExtraHeaders='yes'

# 'Average:'-line selection: show by default
[[ -z $ShowAverage ]] && AverageSrch='Average' || AverageSrch='DontShowAverage'

# Time format selection: expect 24-hour time by default
[[ -z $TimeFmt ]] && TimeFmt='24hr'

# Time-period selection: show all by default
[[ -z $Time ]] && Time='.'

# Block device selection: show all by default
[[ -z $BlockDevs ]] && BlockDevs='.'

# Network interface selection: show all by default
[[ -z $NetDevs ]] && NetDevs='.'

# CPU selection: by default show only combined cpu util ('all' in field 2)
if [[ -z $Cpus ]]; then
  Cpus='all'
elif [[ $Cpus =~ ALL ]]; then
  # If user passed '-P ALL' then let's match everything
  Cpus='.*'
else
  # If some specific CPUs were chosen, we need to remove leading pipe
  Cpus=${Cpus#|}
fi

# If `-n ALL` was passed, set them all up
if [[ -z $NetSelect ]]; then
  :
elif [[ $NetSelect =~ ALL ]]; then
  Selection="$Selection netDEV netEDEV netNFS netNFSD netSOCK netIP netEIP netICMP netEICMP netTCP netETCP netUDP netSOCK6 netIP6 netEIP6 netICMP6 netEICMP6 netUDP6"
else
  Selection="$Selection $NetSelect"
fi

# Handle being passed -A5 or -A6 or -A7 option
# RHEL 4 & 5 defaults are:  -bBcdqrRuvwWy (along with interrupts & networking)
rhel5_all="iotransf paging process queue memutil mempages cpuutil kerntbls cswitch swapping tty intSUM"
# RHEL 6 defaults are:      -bBdqrRSuvwWy
rhel6_all="iotransf paging queue memutil mempages memswap cpuutil kerntbls cswitch swapping tty intSUM"
# RHEL 7 defaults probably: -bBdHqrRSuvwWy
rhel7_all="iotransf paging hugepage queue memutil mempages memswap cpuutil kerntbls cswitch swapping tty intSUM"
case $SelectAllOptsVers in
  4|5)  Selection="$Selection $rhel5_all" ;;
  6)    Selection="$Selection $rhel6_all" ;;
  7)    Selection="$Selection $rhel7_all" ;;
esac

  
# Our universal search function
search() {
  local header drilldown file
  header=$1
  drilldown='.'
  
  # Logic for --noxh option
  case $ShowExtraHeaders in
    # If showing all headers, then set search variable to search for $header
    yes)  SearchForHeader="/$header/" ;;
    # Otherwise, have header search only show first line
    no)   SearchForHeader="NR == 1"   ;;
  esac

  # If we're dealing with CPU utilization, need some special handling
  if [[ $header =~ CPU|usr|user|nice|sys|iowait|(^|%)steal|irq|soft|guest|idle ]]; then
    drilldown="^($Cpus)$"
  
  # Same for network statistics
  elif [[ $header =~ IFACE|rx|tx|byt|drop|rxbyt|txbyt|rxpck|txpck|rxkB|txkB|rxcmp|txcmp|rxmcst|rxerr|txerr|coll|rxdrop|txdrop|txcarr|rxfram|rxfifo|txfifo ]]; then
    drilldown=$NetDevs
  
  # Same for disk activity
  elif [[ $header =~ DEV|rd_sec|wr_sec|avgrq-sz|avgqu-sz|await|svctm|util ]]; then
    drilldown=$BlockDevs
  fi
  
  # Loop through each file in our input array
  for file in ${!Input[@]}; do
    
    # If more than one file, print a header for each
    [[ ${#Input[@]} -gt 1 ]] &&
      printf "${bold}------------------------ $file ------------------------${reset}\n"
    
    [[ $ShowHostname == yes ]] && ${Input[$file]} $file | head -n2
    
    if [[ $TimeFmt == 24hr ]]; then
      # If we're expecting input to be in 24hr time, then fields are:
      # $1 is time or 'Average:', $2 is name of cpu|netdev|blockdev
      ${Input[$file]} $file |                 # Read file with handler (cat, zcat, bzcat, xzcat)
        awk -vRS="\n\n"  "/$header/" |         # Pull up only the particular section we're looking for
          awk "$SearchForHeader  ||  (\$1 ~ /$Time|$AverageSrch/  &&  \$2 ~ /$drilldown/)"
    
    else
      # If we're expecting input to be in 12hr time, then fields are:
      # $1 and $2 are time (e.g. 12:50:01 AM), $3 is name of cpu|netdev|blockdev
      # The "Average:" lines are the same as with 24hr time, i.e. $1
      ${Input[$file]} $file |
        awk -vRS="\n\n"  "/$header/" |
          awk "$SearchForHeader  ||  (\$1\$2 ~ /$Time/  &&  \$3 ~ /$drilldown/)
               \$1 ~ /$AverageSrch/  &&  \$2 ~ /$drilldown/"
    fi
    
    # Add some trailing space to keep things separated
    echo
    
  done
}


if [[ -n $DirectSrch ]]; then
  # If a direct regex search was provided, do it
  search "$DirectSrch"
  
elif [[ -z $Selection ]]; then
  # Otherwise, default to cpu utilization like sar
  Selection=cpuutil
fi

# If some sar options were used, time to get to work
for module in $Selection; do case $module in
  iotransf)   search bread        ;;
  paging)     search pgpgin       ;;
  process)    search proc         ;;
  blockdev)   search await        ;;
  hugepage)   search hugfree      ;;
  queue)      search runq         ;;
  memutil)    search memfree      ;;
  mempages)   search frmpg        ;;
  memswap)    search swpfree      ;;
  cpuutil)    search iowait       ;;
  kerntbls)   search dentunusd    ;;
  cswitch)    search cswch        ;;
  swapping)   search pswpin       ;;
  tty)        search rcvin        ;;
  intSUM)     search "INTR.*sum"      ;;
  netDEV)     search "IFACE.*rxpck"   ;;
  netEDEV)    search "IFACE.*rxerr"   ;;
  netNFS)     search " call.*retrans" ;;
  netNFSD)    search "scall"          ;;
  netSOCK)    search "totsck"         ;;
  netIP)      search "fragcrt"        ;;
  netEIP)     search "ihdrerr"        ;;
  netICMP)    search "oadrmkr"        ;;
  netEICMP)   search "oerr"           ;;
  netTCP)     search "oseg"           ;;
  netETCP)    search "atmptf"         ;;
  netUDP)     search "idgmerr"        ;;
  netSOCK6)   search "tcp6sck"        ;;
  netIP6)     search "irec6"          ;;
  netEIP6)    search "ihdrer6"        ;;
  netICMP6)   search "imsg6"          ;;
  netEICMP6)  search "ierr6"          ;;
  netUDP6)    search "idgm6"          ;;
esac; done
  
