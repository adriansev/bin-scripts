#!/bin/bash

kill_port () {
local PORT
PORT="${1}"
PID=$(lsof -ti 4TCP:${PORT} -sTCP:LISTEN)
[[ -n "${PID}" ]] && { kill -9 "${PID}" || { echo "Connection to local port >>> ${PORT} <<< could not be killed;"; exit 1;}; }
}

split_sshremote () {
    local DEST USER HOSTPORT HOST PORT ARGLIST
    DEST="${1}"
    IFS='@' read -ra DEST_ARR <<< "${DEST}"
    if [[ ${#DEST_ARR[@]} -eq "2" ]]; then
        USER=${DEST_ARR[0]}
        HOSTPORT=${DEST_ARR[1]}
    else
        HOSTPORT=${DEST_ARR[0]}
    fi

    IFS=':' read -ra HOSTPORT_ARR <<< "${HOSTPORT}"
    HOST=${HOSTPORT_ARR[0]}
    PORT=${HOSTPORT_ARR[1]}

    ARGLIST=""
    [[ -n "${USER}" ]] && ARGLIST="-l ${USER}"
    [[ -n "${PORT}" ]] && ARGLIST="${ARGLIST} -p ${PORT}"
    ARGLIST="${ARGLIST} ${HOST}"
    ARGLIST=$(sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//' <<< ${ARGLIST})
    echo -ne "${ARGLIST}"
}

help () {
echo "${0} [[<host_name> | <ssh_alias>] <target_port> <local_port>   ] | [ [list | show] port ] ] | [ kill <port> ] <more ssh args>
The remote port of the destination machine will be made available on the specified local port.
target_port can be of the form: internal_fqdn:port to create a tunnel directly to the internal_fqdn machine"
}

SSHREMOTE="${1}"
shift
[[ -z "${SSHREMOTE}" ]] && { help; exit 1; }

if [[ "${SSHREMOTE}" == "list" || "${SSHREMOTE}" == "show" ]]; then
    port_to_be_listed="${1}"
    if [[ -z "${port_to_be_listed}" ]]; then
        lsof -i 4TCP -Pn -sTCP:LISTEN
    else
        lsof -li 4TCP:${port_to_be_listed} -Pn -sTCP:LISTEN
    fi
    exit;
fi

if [[ "${SSHREMOTE}" == "kill" ]]; then
    port_to_be_killed="${1}"
    [[ -z "${port_to_be_killed}" ]] && { echo "No port specified for killing ssh tunnel"; help; exit 1; }
    kill_port "${port_to_be_killed}"
    exit $?
fi


TARGET_PORT="${1}"
[[ -z "${TARGET_PORT}" ]] && { help; exit 1; }
shift

TARGET_HOST="localhost"
IFS=':' read -ra TARGET_ARR <<< "${TARGET_PORT}"
if [[ ${#TARGET_ARR[@]} == 2 ]]; then
    TARGET_HOST=${TARGET_ARR[0]}
    TARGET_PORT=${TARGET_ARR[1]}
elif [[ ${#TARGET_ARR[@]} == 1 ]]; then
    TARGET_PORT=${TARGET_ARR[0]}
else
    echo "something is wrong with target_port specification!
it should be either just port (of the ssh destination machine) or fdqn:port for a machine that is seen by ssh destination"
    exit 1;
fi

PORT_LOCAL="${1}"
[[ -z "${PORT_LOCAL}" ]] && { help; exit 1; }
shift

ARGUMENTS="${@}"
[[ -n "${ARGUMENTS}" ]] && ARGUMENTS=$(sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//' <<< ${ARGUMENTS})

kill_port ${PORT_LOCAL}
exec ssh -f -q -NTC ${ARGUMENTS} -o ServerAliveInterval=5 -o ServerAliveCountMax=6 -o ExitOnForwardFailure=no -L localhost:${PORT_LOCAL}:${TARGET_HOST}:${TARGET_PORT} $(split_sshremote "${SSHREMOTE}")

